@page "/"

@using AspNetBlazor_RssFeeder.Services
@using AspNetBlazor_RssFeeder.Services.Interfaces
@using AspNetBlazor_RssFeeder.Types;

@implements IDisposable

@inject ISettingsService settings
@inject IFeeder feeder
@inject AutoUpdater autoUpdater

<PageTitle>News</PageTitle>

<div class="card px-3 pt-3 mx-auto" style="max-width: 40rem">
    @if (_feededItems != null)
    {
            @foreach (var items in _feededItems)
            {
                <FeedItem Data=@items></FeedItem>
            }
    }
    else
    {
        <p>Loading . . .</p>
    }
</div>


@code 
{
    private SettingsData? _settingsData;
    private List<FeedItemData>? _feededItems;
    private string? _checkPageUpdated;

    protected override async Task OnInitializedAsync()
    {
        // receive settings
        var issueSettings = await settings.Get();
        _settingsData = await issueSettings.GetValueOrPrintException(Console.Out);

        var issueWasUpdated = await feeder.WasUpdated();
        var wasUpdated = await issueWasUpdated.GetValueOrPrintException(Console.Out);

        if (_feededItems == null || wasUpdated)
        {
            // feed news
            feeder.Settings = _settingsData;
            var issueNews = await feeder.FeedNews();
            _feededItems = (await issueNews.GetValueOrPrintException(Console.Out))?.ToList();
        }

        _checkPageUpdated = Path.GetRandomFileName();
        if (_settingsData != null) {
            await autoUpdater.SetUpTimer(_settingsData!.UpdateFrequency, async () =>
            {
                var issueWasUpdated = await feeder.WasUpdated();
                var wasUpdated = await issueWasUpdated.GetValueOrPrintException(Console.Out);

                if (issueWasUpdated?.Value != null && wasUpdated)
                {
                    Console.WriteLine("Info: Page was updated");
                     var issueNews = await feeder.FeedNews();
                    _feededItems = (await issueNews.GetValueOrPrintException(Console.Out))?.ToList();
                }
                _checkPageUpdated = Path.GetRandomFileName();

                await InvokeAsync(() => StateHasChanged());
            });
        }
    }

    public void Dispose() => autoUpdater.Dispose();
}
