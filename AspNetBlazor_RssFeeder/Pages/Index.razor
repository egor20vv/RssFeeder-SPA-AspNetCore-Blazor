@page "/"

@using AspNetBlazor_RssFeeder.Services
@using AspNetBlazor_RssFeeder.Services.Interfaces
@using AspNetBlazor_RssFeeder.Types;

@implements IDisposable

@inject ISettingsService settings
@inject IFeeder feeder
@inject AutoUpdater autoUpdater

<PageTitle>News</PageTitle>

@if (_feededItems != null)
{
    <div class="card px-3 pt-3 mx-auto" style="max-width: 40rem">
        @foreach (var items in _feededItems)
        {
            <FeedItem Data=@items></FeedItem>
        }
    </div>
}
else
{
    <p>Loading . . .</p>
}


@code 
{
    private SettingsData? _settingsData;
    private List<FeedItemData>? _feededItems;
    private string? _checkPageUpdated;

    protected override async Task OnInitializedAsync()
    {
        // receive settings
        var issueSettings = await settings.Get();
        _settingsData = issueSettings.Value;

        var issueWasUpdated = await feeder.WasUpdated();
        if (_feededItems == null || issueWasUpdated.Value)
        {
            // feed news
            feeder.Settings = _settingsData;
            var issueNews = await feeder.FeedNews();
            _feededItems = issueNews.Value?.ToList();
        }

        _checkPageUpdated = Path.GetRandomFileName();
        autoUpdater.SetUpTimer(_settingsData!.UpdateFrequency, async () =>
        {
            var issueWasUpdated = await feeder.WasUpdated();
            if (issueWasUpdated?.Value != null && issueWasUpdated.Value == true)
            {
                Console.WriteLine("Info: Page was updated");
                var issueNews = await feeder.FeedNews();
                _feededItems = issueNews.Value?.ToList();
            }
            _checkPageUpdated = Path.GetRandomFileName();

            await InvokeAsync(() => StateHasChanged());
        });
    }

    public void Dispose() => autoUpdater.Dispose();
}
